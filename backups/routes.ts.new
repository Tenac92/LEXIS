import express, { type Express, Request, Response } from "express";
import { createServer, type Server } from "http";
// Import from the auth middleware which re-exports from the authentication module
import { authenticateSession, User, AuthenticatedRequest } from "./middleware/auth";
import apiRouter from "./controllers";
import { getDashboardStats } from "./controllers/dashboard";
import { router as budgetRouter, getBudgetByMis } from "./controllers/budgetController";
import { router as budgetNotificationsRouter } from "./controllers/budgetNotificationsController";
import { router as unitsRouter } from "./controllers/unitsController";
import { router as usersRouter } from "./controllers/usersController";
import { router as projectRouter } from "./controllers/projectController";
import { router as documentsRouter } from "./controllers/documentsController";
import templatePreviewRouter from "./routes/template-preview";
import authRouter from "./routes/auth";
import budgetUploadRouter from "./routes/budget-upload"; // Import the budget upload router
import attachmentsRouter from "./controllers/attachments"; // Import for attachments (default export)
import healthcheckRouter from "./routes/healthcheck"; // Import the original healthcheck router
import healthRouter from "./routes/health"; // Import our new enhanced health check router
import sdegdaefkDiagnosticRouter from "./routes/sdegdaefk-diagnostic"; // Import the sdegdaefk.gr diagnostic router
import documentsBrowserHandler from "./middleware/sdegdaefk/documentsBrowserHandler"; // Import browser request handler for /documents
import authBrowserHandler from "./middleware/sdegdaefk/authBrowserHandler"; // Import browser request handler for /auth
// Note: We now use the consolidated documentsController instead of multiple document route files
import { log } from "./vite";
import { supabase } from "./config/db"; // Main supabase client
import { verifyDatabaseConnections } from "./data"; // Database utilities
import { BudgetService } from "./services/budgetService"; // Budget service for operations

export async function registerRoutes(app: Express): Promise<Server> {
  try {
    // TODO: Refactor - Move these direct document routes to the consolidated DocumentController
    // IMPORTANT: Register direct document creation route first to bypass any routing conflicts
    app.post('/api/documents', authenticateSession, async (req: AuthenticatedRequest, res: Response) => {
      try {
        console.log('[DIRECT_ROUTE] Document creation request received:', JSON.stringify(req.body));

        if (!req.user?.id) {
          return res.status(401).json({ message: 'Authentication required' });
        }

        const { unit, project_id, expenditure_type, recipients, total_amount, attachments } = req.body;

        if (!recipients?.length || !project_id || !unit || !expenditure_type) {
          return res.status(400).json({
            message: 'Missing required fields: recipients, project_id, unit, and expenditure_type are required'
          });
        }

        // Get project NA853
        const { data: projectData, error: projectError } = await supabase
          .from('Projects')
          .select('na853')
          .eq('mis', project_id)
          .single();

        if (projectError || !projectData) {
          return res.status(404).json({ message: 'Project not found', error: projectError?.message });
        }

        // Format recipients data
        const formattedRecipients = recipients.map((r: any) => ({
          firstname: String(r.firstname).trim(),
          lastname: String(r.lastname).trim(),
          fathername: String(r.fathername).trim(),
          afm: String(r.afm).trim(),
          amount: parseFloat(String(r.amount)),
          installment: String(r.installment).trim()
        }));

        const now = new Date().toISOString();

        // Create document with exact schema match and set initial status to pending
        const documentPayload = {
          unit,
          project_id,
          project_na853: projectData.na853,
          expenditure_type,
          status: 'pending', // Always set initial status to pending
          recipients: formattedRecipients,
          total_amount: parseFloat(String(total_amount)) || 0,
          generated_by: req.user.id,
          department: req.user.department || null,
          // Instead of contact_number, use telephone field to match the schema
          telephone: req.user.telephone || null,
          user_name: req.user.name || null,
          attachments: attachments || [],
          created_at: now,
          updated_at: now
        };

        console.log('[DIRECT_ROUTE] Document payload prepared:', documentPayload);

        // Insert into database
        const { data, error } = await supabase
          .from('generated_documents')
          .insert([documentPayload])
          .select('id')
          .single();

        if (error) {
          console.error('[DIRECT_ROUTE] Error creating document:', error);
          return res.status(500).json({ 
            message: 'Error creating document', 
            error: error.message,
            details: error.details
          });
        }

        console.log('[DIRECT_ROUTE] Document created successfully:', data.id);
        
        // NOTE: Budget update has been removed from this endpoint to prevent duplicate updates.
        // The budget is now updated only in the V2 document creation endpoint.
        // This prevents duplicate budget history entries.
        
        res.status(201).json({ id: data.id });
      } catch (error) {
        console.error('[DIRECT_ROUTE] Error creating document:', error);
        res.status(500).json({ 
          message: 'Error creating document', 
          error: error instanceof Error ? error.message : 'Unknown error' 
        });
      }
    });

    // Removed test routes for production code
    
    // VERSION 2 DOCUMENT CREATION ENDPOINT - Direct access for client-side
    // This is the endpoint that the create-document-dialog.tsx component uses
    // TODO: Refactor - Move to DocumentsController and standardize with the v1 endpoint
    app.post('/api/v2-documents', async (req: Request, res: Response) => {
      try {
        console.log('[DIRECT_ROUTE_V2] Document creation request with body:', req.body);
        
        // Check if there's a session but don't require auth for testing
        console.log('[DIRECT_ROUTE_V2] Session info:', (req as any).session);
        
        const { unit, project_id, project_mis, expenditure_type, recipients, total_amount, attachments = [], region } = req.body;
        
        if (!recipients?.length || !project_id || !unit || !expenditure_type) {
          return res.status(400).json({
            message: 'Missing required fields: recipients, project_id, unit, and expenditure_type are required'
          });
        }
        
        // Get project NA853 from Supabase if not provided
        let project_na853 = req.body.project_na853;
        if (!project_na853) {
          console.log('[DIRECT_ROUTE_V2] Fetching NA853 for project with MIS:', project_id);
          
          try {
            // Look up in the Projects table - using the project_id as the MIS value
            const { data: projectData, error: projectError } = await supabase
              .from('Projects')
              .select('na853')
              .eq('mis', project_id)
              .single();
            
            if (!projectError && projectData && projectData.na853) {
              // Use the full NA853 value without stripping non-numeric characters
              project_na853 = String(projectData.na853);
              console.log('[DIRECT_ROUTE_V2] Retrieved NA853 from Projects table:', project_na853);
              
              // If NA853 is empty for some reason, use project_mis as fallback
              if (!project_na853) {
                console.error('[DIRECT_ROUTE_V2] NA853 value is empty:', projectData.na853);
                // Try to use project_mis as fallback
                if (req.body.project_mis) {
                  project_na853 = req.body.project_mis;
                  console.log('[DIRECT_ROUTE_V2] Using project_mis as fallback:', req.body.project_mis);
                } else {
                  // Last resort - use project_id as fallback
                  project_na853 = project_id;
                  console.log('[DIRECT_ROUTE_V2] Using project_id as fallback:', project_id);
                }
              }
            } else {
              // If no data found in Projects table, use project_mis as fallback
              if (req.body.project_mis && !isNaN(Number(req.body.project_mis))) {
                console.log('[DIRECT_ROUTE_V2] Using project_mis directly as numeric fallback:', req.body.project_mis);
                project_na853 = req.body.project_mis;
              } else {
                console.error('[DIRECT_ROUTE_V2] Could not find project in Projects table:', projectError);
                return res.status(400).json({ 
                  message: 'Project not found in Projects table and no fallback available', 
                  error: 'Project NA853 could not be determined'
                });
              }
            }
          } catch (error) {
            console.error('[DIRECT_ROUTE_V2] Error during project lookup:', error);
            
            // If error happens, use project_mis as numeric fallback if available and valid
            if (req.body.project_mis && !isNaN(Number(req.body.project_mis))) {
              console.log('[DIRECT_ROUTE_V2] Using project_mis as numeric fallback due to error:', req.body.project_mis);
              project_na853 = req.body.project_mis;
            } else {
              console.error('[DIRECT_ROUTE_V2] No valid numeric fallback available');
              // Last resort - use 0 as safe numeric value
              project_na853 = '0';
              console.log('[DIRECT_ROUTE_V2] Using safe numeric fallback: 0');
            }
          }
          
          console.log('[DIRECT_ROUTE_V2] Final NA853 value:', project_na853);
        }
        
        // Format recipients data
        const formattedRecipients = recipients.map((r: any) => ({
          firstname: String(r.firstname).trim(),
          lastname: String(r.lastname).trim(),
          fathername: String(r.fathername || '').trim(),
          afm: String(r.afm).trim(),
          amount: parseFloat(String(r.amount)),
          installments: Array.isArray(r.installments) ? r.installments : [String(r.installment || 'ΕΦΑΠΑΞ').trim()],
          installmentAmounts: r.installmentAmounts || {}
        }));
        
        const now = new Date().toISOString();
        
        // Log user authentication status
        console.log('[DIRECT_ROUTE_V2] User info for document creation:', {
          hasSession: !!(req as any).session,
          hasUser: !!(req as any).session?.user,
          userId: (req as any).session?.user?.id,
          userDepartment: (req as any).session?.user?.department
        });

        // Create document payload
        const documentPayload = {
          unit,
          project_id: req.body.project_mis || project_id, // Use numeric project_mis if available
          project_na853,
          expenditure_type,
          status: 'pending', // Always set initial status to pending
          recipients: formattedRecipients,
          total_amount: parseFloat(String(total_amount)) || 0,
          attachments: attachments || [],
          region: region || null, // Add region field
          generated_by: (req as any).session?.user?.id || null, // Add user ID if available
          department: (req as any).session?.user?.department || null, // Add department if available
          created_at: now,
          updated_at: now
        };
        
        console.log('[DIRECT_ROUTE_V2] Inserting document with payload:', documentPayload);
        
        // Insert into database - Use explicit ID generation with max+1 to avoid conflicts
        // First check if we need to handle a conflict case
        const { data: maxIdData } = await supabase
          .from('generated_documents')
          .select('id')
          .order('id', { ascending: false })
          .limit(1)
          .single();
        
        // Get the max ID and add 1
        const newId = (maxIdData?.id || 0) + 100; // Add 100 to ensure we're well clear of any existing IDs
        console.log('[DIRECT_ROUTE_V2] Found max ID:', maxIdData?.id, 'Using new ID:', newId);
        
        // Create a copy of document payload with an explicit new ID
        const finalPayload = { 
          ...documentPayload,
          id: newId
        };
        
        // Insert into database with explicit ID
        const { data, error } = await supabase
          .from('generated_documents')
          .insert([finalPayload])
          .select('id')
          .single();
        
        if (error) {
          console.error('[DIRECT_ROUTE_V2] Supabase error:', error);
          return res.status(500).json({ 
            message: 'Error creating document in database', 
            error: error.message,
            details: error.details
          });
        }
        
        console.log('[DIRECT_ROUTE_V2] Document created successfully with ID:', data.id);
        
        // Update the budget to reflect the document creation
        try {
          // Convert project_id to MIS if needed (project_id or project_mis)
          const projectMIS = req.body.project_mis || project_id;
          console.log('[DIRECT_ROUTE_V2] Updating budget for project:', projectMIS, 'with amount:', documentPayload.total_amount);
          console.log('[DIRECT_ROUTE_V2] Budget update parameters: ', {
            mis: projectMIS, 
            amount: documentPayload.total_amount,
            userId: (req as any).session?.user?.id || 'guest',
            documentId: data.id,
            changeReason: `Δημιουργία εγγράφου ID:${data.id} για το έργο με MIS:${projectMIS}`
          });
          
          const budgetResult = await BudgetService.updateBudget(
            projectMIS,                         // MIS
            documentPayload.total_amount,       // Amount
            (req as any).session?.user?.id || 'guest',  // User ID
            data.id,                            // Document ID
            `Δημιουργία εγγράφου ID:${data.id} για το έργο με MIS:${projectMIS}`  // Change reason
          );
          
          console.log('[DIRECT_ROUTE_V2] Budget update result:', budgetResult.status);
          console.log('[DIRECT_ROUTE_V2] Full budget update response:', JSON.stringify(budgetResult, null, 2));
        } catch (budgetError) {
          console.error('[DIRECT_ROUTE_V2] Error updating budget (document still created):', budgetError);
          console.error('[DIRECT_ROUTE_V2] Budget update error details:', budgetError instanceof Error ? budgetError.message : 'Unknown error');
          // Continue without failing - document is created but budget may not be updated
        }
        
        res.status(201).json({ 
          id: data.id,
          message: 'Document created and stored in database'
        });
      } catch (error) {
        console.error('[DIRECT_ROUTE_V2] Error:', error);
        res.status(500).json({ 
          message: 'Error in direct route', 
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    });

    // Authentication routes
    log('[Routes] Setting up authentication routes...');
    
    // Import the consolidated auth router
    const authApiRouter = await import('./routes/api/auth').then(m => m.default);
    
    // Use the consolidated auth router for all auth routes
    app.use('/api/auth', authApiRouter);
    
    // Note: We are now using the consolidated auth routes from server/routes/api/auth.ts
    // which includes all auth functionality:
    // - Login
    // - Logout
    // - Register
    // - Password reset
    // - Session management
    
    // Add fallback route for browser /auth path to redirect properly
    app.get('/auth/*', authBrowserHandler);
    app.get('/auth', authBrowserHandler);
    
    // Document routes - use the controller and maintain backward compatibility
    log('[Routes] Setting up documents routes with controller...');
    
    // Set up document browser route first to handle special cases
    app.get('/documents*', documentsBrowserHandler);
    app.get('/documents', documentsBrowserHandler);
    
    // Set up the full documents controller for API routes
    app.use('/api/documents', documentsRouter);
    
    // Set up project controller
    log('[Routes] Setting up project routes with controller...');
    app.use('/api/projects', projectRouter);
    
    // Set up template preview routes
    log('[Routes] Setting up template preview routes...');
    app.use('/api/template-preview', templatePreviewRouter);
    
    // Set up units routes
    log('[Routes] Setting up units routes...');
    app.use('/api/units', authenticateSession, unitsRouter);
    
    // Set up users routes
    log('[Routes] Setting up users routes...');
    app.use('/api/users', authenticateSession, usersRouter);
    
    // Set up dashboard routes
    log('[Routes] Setting up dashboard routes...');
    app.get('/api/dashboard/stats', authenticateSession, getDashboardStats);
    
    // Allow public access to budget data by MIS for document creation
    // Using our specialized controller function for MIS lookups
    app.get('/api/budget/:mis', getBudgetByMis);
    
    // Set up budget routes with controllers
    log('[Routes] Setting up budget routes with controllers...');
    
    // Main budget routes
    app.use('/api/budget', authenticateSession, budgetRouter);
    
    // Budget history notifications
    app.use('/api/budget-notifications', authenticateSession, budgetNotificationsRouter);
    
    // Budget upload router
    app.use('/api/budget-upload', authenticateSession, budgetUploadRouter);
    
    // Set up document attachments
    app.use('/api/attachments', attachmentsRouter);
    
    // Set up diagnostic routes
    log('[Routes] Setting up diagnostic routes...');
    app.use('/api/healthcheck', healthcheckRouter);
    app.use('/api/health', healthRouter);
    app.use('/api/diagnostic', sdegdaefkDiagnosticRouter);
    
    // If we have an api router, set it up
    // This was used for legacy routes and is kept for backward compatibility
    if (apiRouter) {
      log('[Routes] Setting up legacy API router...');
      app.use('/api', apiRouter);
    }
    
    log('[Routes] Setting up static file serving...');
    
    // Static server setup is now in server/vite.ts
    // and will be called after this function
    
    // Extract routes for diagnostics
    function extractRoutes(stack: any[], basePath = '') {
      return stack
        .filter((layer: any) => layer.route)
        .map((layer: any) => {
          const path = basePath + (layer.route?.path || '');
          const methods = layer.route?.methods ? Object.keys(layer.route.methods) : [];
          return { path, methods };
        });
    }
    
    // Log registered routes for debugging
    const routes = extractRoutes(app._router.stack);
    console.log(`[Routes] Registered ${routes.length} routes`);
    
    // Create server
    const server = createServer(app);
    console.log('[Server] HTTP server created');
    
    // Return the server
    return server;
  } catch (error) {
    console.error('[Routes] Error registering routes:', error);
    // Need to create and return a server even in error case
    return createServer(app);
  }
}