You’re (almost certainly) tripping Word’s “there’s a problem with the content” because you’re reusing the same NO_BORDERS object for both tables and table cells.

In docx, table borders support insideHorizontal / insideVertical, but table cell borders do not. Passing inside* on <w:tcBorders> produces invalid XML that Word tries to “repair”, hence the error.

Quick fix

Use two border presets and apply the right one in the right place. While we’re here, I’ve also:

made the right column width the exact complement to avoid rounding drift,

fixed the valign param typing,

kept your other logic intact.

// ---- constants & helpers
const NONE = { style: BorderStyle.NONE };

// Table borders: can include insideHorizontal/insideVertical
const TABLE_NO_BORDERS = {
  top: NONE,
  bottom: NONE,
  left: NONE,
  right: NONE,
  insideHorizontal: NONE,
  insideVertical: NONE,
};

// Cell borders: **must NOT** include inside*
const CELL_NO_BORDERS = {
  top: NONE,
  bottom: NONE,
  left: NONE,
  right: NONE,
};

const NO_MARGINS = { top: 0, bottom: 0, left: 0, right: 0 };

// A4 usable content width with Word's default margins = 10466 twips.
const PAGE_CONTENT_WIDTH = 10466;
const pctTwips = (n: number) => Math.round((PAGE_CONTENT_WIDTH * n) / 100);

const LEFT_COL_WIDTH = pctTwips(60);
// make right the exact complement to avoid sum ≠ PAGE_CONTENT_WIDTH due to rounding
const RIGHT_COL_WIDTH = PAGE_CONTENT_WIDTH - LEFT_COL_WIDTH;

// Right-inner "ΠΡΟΣ:" table column widths (20% / 80% of right column)
const PROS_LABEL_COL = Math.round(RIGHT_COL_WIDTH * 0.2);
const PROS_TEXT_COL = RIGHT_COL_WIDTH - PROS_LABEL_COL;

const p = (text: string, opts?: { bold?: boolean }) =>
  new Paragraph({
    children: [
      new TextRun({
        text,
        bold: opts?.bold || false,
        size: DocumentUtilities.DEFAULT_FONT_SIZE,
        font: DocumentUtilities.DEFAULT_FONT,
      }),
    ],
    alignment: AlignmentType.LEFT,
  });

const boldP = (text: string) => p(text, { bold: true });
const contact = (label: string, value: string) =>
  DocumentUtilities.createContactDetail(label, value);

// Cell helper using DXA (twips), not percentages
const cellDXA = (
  children: (Paragraph | Table)[],
  widthTwips?: number,
  valign: VerticalAlign = VerticalAlign.TOP, // <-- correct typing
) =>
  new TableCell({
    width: { size: widthTwips ?? PAGE_CONTENT_WIDTH, type: WidthType.DXA },
    verticalAlign: valign,
    borders: CELL_NO_BORDERS, // <-- cell borders only
    children,
  });

const row = (cells: TableCell[]) => new TableRow({ children: cells });

// ... your data prep (userInfo, address, leftCol, toLines) stays the same ...

const rightInnerTable = new Table({
  layout: TableLayoutType.FIXED,
  width: { size: RIGHT_COL_WIDTH, type: WidthType.DXA },
  borders: TABLE_NO_BORDERS, // <-- table borders may have inside*
  rows: [
    row([
      cellDXA(
        [
          new Paragraph({
            children: [new TextRun({ text: "ΠΡΟΣ:", bold: true, size: 20 })],
            spacing: { before: 2200 },
            alignment: AlignmentType.LEFT,
          }),
        ],
        PROS_LABEL_COL,
      ),
      cellDXA(
        [
          new Paragraph({
            children: [new TextRun({ text: toLines[0], size: 20 })],
            spacing: { before: 2200 },
            alignment: AlignmentType.LEFT,
          }),
          ...toLines.slice(1).map(
            (t) =>
              new Paragraph({
                children: [new TextRun({ text: t, size: 20 })],
                alignment: AlignmentType.LEFT,
              }),
          ),
        ],
        PROS_TEXT_COL,
      ),
    ]),
  ],
});

// ---- whole header table
return new Table({
  layout: TableLayoutType.FIXED,
  width: { size: PAGE_CONTENT_WIDTH, type: WidthType.DXA },
  borders: TABLE_NO_BORDERS, // <-- table borders here
  rows: [
    row([
      cellDXA(leftCol, LEFT_COL_WIDTH, VerticalAlign.TOP),
      cellDXA([rightInnerTable], RIGHT_COL_WIDTH, VerticalAlign.TOP),
    ]),
  ],
});