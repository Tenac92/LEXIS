 const expenditureType = documentData.expenditure_type || "ΔΑΠΑΝΗ";
    const config = DocumentUtilities.getExpenditureConfig(expenditureType);
    const mainText = config.mainText;
    
    contentParagraphs.push(
      new Paragraph({
        children: [
          new TextRun({
            text: mainText,
            size: DocumentUtilities.DEFAULT_FONT_SIZE,
            font: DocumentUtilities.DEFAULT_FONT,
          }),
        ],
        spacing: { after: 0 },
      })
    );
    
    return contentParagraphs;
  }

  /**
   * Create payment table with expenditure type specific columns
   */
  private static createPaymentTable(recipients: any[], expenditureType: string): Table {
    // Get columns from centralized configuration
    const config = DocumentUtilities.getExpenditureConfig(expenditureType);
    const columns = config.columns;
    const borderStyle = BorderStyle.SINGLE;
    
    const headerCells = columns.map(column => 
      new TableCell({
        children: [DocumentUtilities.createCenteredParagraph(column, { 
          bold: false, 
          size: DocumentUtilities.DEFAULT_FONT_SIZE 
        })],
        borders: {
          top: { style: borderStyle, size: 1 },
          bottom: { style: borderStyle, size: 1 },
          left: { style: borderStyle, size: 1 },
          right: { style: borderStyle, size: 1 },
        },
      })
    );

    const rows = [new TableRow({ children: headerCells, tableHeader: true })];

    let totalAmount = 0;

    recipients.forEach((recipient, index) => {
      const amount = recipient.amount || 0;
      totalAmount += amount;
      
      // Create standard cells for most expenditure types
      const cells = [
        new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(`${index + 1}.`, { 
            size: DocumentUtilities.DEFAULT_FONT_SIZE 
          })],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }),
        new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(
            `${recipient.firstname} ${recipient.lastname}`, { 
              size: DocumentUtilities.DEFAULT_FONT_SIZE 
            }
          )],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }),
        new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(recipient.afm || "", { 
            size: DocumentUtilities.DEFAULT_FONT_SIZE 
          })],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }),
      ];

      // Add expenditure-specific column based on type
      if (expenditureType === "ΕΚΤΟΣ ΕΔΡΑΣ") {
        cells.push(new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(
            recipient.days?.toString() || "1", { 
              size: DocumentUtilities.DEFAULT_FONT_SIZE 
            }
          )],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }));
      } else if (expenditureType === "ΕΠΙΔΟΤΗΣΗ ΕΝΟΙΚΙΟΥ") {
        cells.push(new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(
            recipient.months?.toString() || "1", { 
              size: DocumentUtilities.DEFAULT_FONT_SIZE 
            }
          )],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }));
      } else {
        // Default to installment for ΔΚΑ types
        cells.push(new TableCell({
          children: [DocumentUtilities.createCenteredParagraph(
            recipient.installment?.toString() || "Α", { 
              size: DocumentUtilities.DEFAULT_FONT_SIZE 
            }
          )],
          borders: {
            top: { style: borderStyle, size: 1 },
            bottom: { style: borderStyle, size: 1 },
            left: { style: borderStyle, size: 1 },
            right: { style: borderStyle, size: 1 },
          },
        }));
      }

      // Add amount column
      cells.push(new TableCell({
        children: [DocumentUtilities.createCenteredParagraph(
          DocumentUtilities.formatCurrency(amount), { 
            size: DocumentUtilities.DEFAULT_FONT_SIZE 
          }
        )],
        borders: {
          top: { style: borderStyle, size: 1 },
          bottom: { style: borderStyle, size: 1 },
          left: { style: borderStyle, size: 1 },
          right: { style: borderStyle, size: 1 },
        },
      }));

      rows.push(new TableRow({ children: cells }));
    });
