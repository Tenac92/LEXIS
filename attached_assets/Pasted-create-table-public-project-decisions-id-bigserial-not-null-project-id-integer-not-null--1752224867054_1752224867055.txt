create table public.project_decisions (
  id bigserial not null,
  project_id integer not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  decision_sequence integer not null default 1,
  decision_type text not null default 'Έγκριση'::text,
  protocol_number text null,
  fek jsonb null,
  ada text null,
  decision_budget numeric(12, 2) null,
  expenses_covered numeric(12, 2) null,
  decision_date date null,
  included boolean null default true,
  is_active boolean null default true,
  comments text null,
  budget_decision text null,
  funding_decision text null,
  allocation_decision text null,
  created_by bigint null,
  updated_by bigint null,
  expediture_type integer[] null,
  implementing_agency integer[] null,
  constraint project_decisions_pkey primary key (id),
  constraint project_decisions_project_id_decision_sequence_key unique (project_id, decision_sequence),
  constraint project_decisions_created_by_fkey foreign KEY (created_by) references users (id),
  constraint project_decisions_project_id_fkey foreign KEY (project_id) references "Projects" (id) on delete CASCADE,
  constraint project_decisions_updated_by_fkey foreign KEY (updated_by) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_project_decisions_project_id on public.project_decisions using btree (project_id) TABLESPACE pg_default;

create index IF not exists idx_project_decisions_created_at on public.project_decisions using btree (created_at) TABLESPACE pg_default;

create index IF not exists idx_project_decisions_decision_type on public.project_decisions using btree (decision_type) TABLESPACE pg_default;

create index IF not exists idx_project_decisions_protocol on public.project_decisions using btree (protocol_number) TABLESPACE pg_default;

create trigger update_project_decisions_updated_at BEFORE
update on project_decisions for EACH row
execute FUNCTION update_updated_at_column ();