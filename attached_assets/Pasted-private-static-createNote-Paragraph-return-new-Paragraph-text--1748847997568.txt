private static createNote(): Paragraph {
    return new Paragraph({
      text: "Παρακαλούμε όπως, μετά την ολοκλήρωση της διαδικασίας ελέγχου και εξόφλησης των δικαιούχων, αποστείλετε στην Υπηρεσία μας αντίγραφα των επιβεβαιωμένων ηλεκτρονικών τραπεζικών εντολών.",
    });
  }

  private static createFooter(
    documentData: DocumentData,
    unitDetails: UnitDetails | null | undefined,
  ): Table {
    const attachments = (documentData.attachments || [])
      .map((item) => item.replace(/^\d+\-/, ""))
      .filter(Boolean);

    // Create a two-column table with proper layout
    // Create the left column content (attachments, notifications, etc.)
    const leftColumnParagraphs: Paragraph[] = [];

    leftColumnParagraphs.push(
      this.createBoldUnderlinedParagraph("ΣΥΝΗΜΜΕΝΑ (Εντός κλειστού φακέλου)"),
    );

    for (let i = 0; i < attachments.length; i++) {
      leftColumnParagraphs.push(
        new Paragraph({
          text: `${i + 1}. ${attachments[i]}`,
          keepLines: false,
          indent: { left: 426 },
          style: "a6",
        }),
      );
    }

    leftColumnParagraphs.push(
      this.createBoldUnderlinedParagraph("ΚΟΙΝΟΠΟΙΗΣΗ"),
    );

    const notifications = [
      "Γρ. Υφυπουργού Κλιματικής Κρίσης & Πολιτικής Προστασίας",
      "Γρ. Γ.Γ. Αποκατάστασης Φυσικών Καταστροφών και Κρατικής Αρωγής",
      "Γ.Δ.Α.Ε.Φ.Κ.",
    ];

    for (let i = 0; i < notifications.length; i++) {
      leftColumnParagraphs.push(
        new Paragraph({
          text: `${i + 1}. ${notifications[i]}`,
          keepLines: false,
          indent: { left: 426 },
          style: "a6",
        }),
      );
    }

    leftColumnParagraphs.push(
      this.createBoldUnderlinedParagraph("ΕΣΩΤΕΡΙΚΗ ΔΙΑΝΟΜΗ"),
    );

    leftColumnParagraphs.push(
      new Paragraph({
        text: "1. Χρονολογικό Αρχείο",
        keepLines: false,
        indent: { left: 426 },
        style: "a6",
      }),
    );

    // Create the right column with signature (text only)

    // First, create paragraphs for the title and role
    const titleParagraph = new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({
          text: unitDetails?.manager?.order || "",
          bold: true,
        }),
      ],
    });

    const roleParagraph = new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({
          text: unitDetails?.manager?.title || "",
          bold: true,
        }),
      ],
    });

    // Create an empty space where signature would be
    const signatureSpaceParagraph = new Paragraph({
      alignment: AlignmentType.CENTER,
      spacing: { before: 160, after: 160 },
      children: [
        new TextRun({
          text: "",
        }),
      ],
    });

    // Create paragraphs for the name and degree
    const nameParagraph = new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({
          text: unitDetails?.manager?.name || "",
          bold: true,
        }),
      ],
    });

    const degreeParagraph = new Paragraph({
      alignment: AlignmentType.CENTER,
      children: [
        new TextRun({
          text: unitDetails?.manager?.degree || "",
        }),
      ],
    });

    // Combine all paragraphs into a table for proper layout
    const signatureTextbox = new Table({
      width: { size: 100, type: WidthType.PERCENTAGE },
      borders: {
        top: { style: BorderStyle.NONE },
        bottom: { style: BorderStyle.NONE },
        left: { style: BorderStyle.NONE },
        right: { style: BorderStyle.NONE },
      },
      rows: [
        new TableRow({
          children: [
            new TableCell({
              borders: {
                top: { style: BorderStyle.NONE },
                bottom: { style: BorderStyle.NONE },
                left: { style: BorderStyle.NONE },
                right: { style: BorderStyle.NONE },
              },
              children: [
                titleParagraph,
                roleParagraph,
                signatureSpaceParagraph,
                nameParagraph,
                degreeParagraph,
              ],
            }),
          ],
        }),
      ],
    });

    // For compatibility, create a container paragraph to hold the textbox
    const signatureParagraph = new Paragraph({
      keepLines: true,
      spacing: { before: 480 }, // Add some space before the signature
      children: [new TextRun({ text: "" })],
    });

    // Create a floating table that keeps the correct layout
    return new Table({
      width: { size: 100, type: WidthType.PERCENTAGE },
      columnWidths: [7000, 4000], // Set fixed column widths
      borders: {
        top: { style: BorderStyle.NONE },
        bottom: { style: BorderStyle.NONE },
        left: { style: BorderStyle.NONE },
        right: { style: BorderStyle.NONE },
        insideHorizontal: { style: BorderStyle.NONE },
        insideVertical: { style: BorderStyle.NONE },
      },
      rows: [
        new TableRow({
          cantSplit: false, // Allow the row to split across pages - important!
          children: [
            // Left column - allows flow across pages
            new TableCell({
              children: leftColumnParagraphs,
              verticalAlign: VerticalAlign.TOP,
              margins: {
                marginUnitType: WidthType.DXA,
                right: 300,
              }, // Add some margin for separation
              borders: {
                top: { style: BorderStyle.NONE },
                bottom: { style: BorderStyle.NONE },
                left: { style: BorderStyle.NONE },
                right: { style: BorderStyle.NONE },
              },
            }),

            // Right column - signature stays together in a textbox
            new TableCell({
              children: [signatureTextbox],
              verticalAlign: VerticalAlign.TOP,
              borders: {
                top: { style: BorderStyle.NONE },
                bottom: { style: BorderStyle.NONE },
                left: { style: BorderStyle.NONE },
                right: { style: BorderStyle.NONE },
              },
            }),
          ],
        }),
      ],
    });
  }