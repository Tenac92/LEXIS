recipients.forEach((recipient, index) => {
      // Check if fathername exists and is not empty
      const firstname = recipient.firstname || "";
      const lastname = recipient.lastname || "";
      const fathername = recipient.fathername || "";

      // Check if fathername exists and is not empty
      const fullName =
        !fathername || fathername.trim() === ""
          ? `${lastname} ${firstname}`.trim()
          : `${lastname} ${firstname} ΤΟΥ ${fathername}`.trim();
      const afm = recipient.afm || "";
      const rowNumber = (index + 1).toString() + ".";
      let installments: string[] = [];
      if (
        Array.isArray(recipient.installments) &&
        recipient.installments.length > 0
      ) {
        installments = recipient.installments;
      } else if (recipient.installment) {
        installments = [recipient.installment.toString()];
      } else {
        installments = ["ΕΦΑΠΑΞ"];
      }

      // Get installment amounts if available
      const installmentAmounts = recipient.installmentAmounts || {};

      // If there's only one installment, create a simple row
      if (installments.length === 1) {
        const installment = installments[0];
        const amount = installmentAmounts[installment] || recipient.amount;

        rows.push(
          new TableRow({
            height: { value: 360, rule: HeightRule.ATLEAST },
            children: [
              this.createTableCell(rowNumber, "center"),
              this.createTableCellWithSecondaryText(
                fullName,
                recipient.secondary_text,
                "center",
              ),
              this.createTableCell(
                amount.toLocaleString("el-GR", {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2,
                }),
                "center",
              ),
              this.createTableCell(installment, "center"),
              this.createTableCell(afm, "center"),
              this.createTableCell(expenditureType, "center"), // Add expenditure type in the extra column
            ],
          }),
        );
      } else {
        // For multiple installments, use row spanning (same as primary document)
        const rowSpan = installments.length;
        const rowHeight = 360; // Base height for one row

        // Create cells for the first row with rowSpan
        const nameCell = new TableCell({
          rowSpan: rowSpan,
          verticalAlign: VerticalAlign.CENTER,
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: fullName,
                  size: this.DEFAULT_FONT_SIZE,
                }),
              ],
            }),
          ],
        });

        const indexCell = new TableCell({
          rowSpan: rowSpan,
          verticalAlign: VerticalAlign.CENTER,
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: rowNumber,
                  size: this.DEFAULT_FONT_SIZE,
                }),
              ],
            }),
          ],
        });

        const afmCell = new TableCell({
          rowSpan: rowSpan,
          verticalAlign: VerticalAlign.CENTER,
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: afm,
                  size: this.DEFAULT_FONT_SIZE,
                }),
              ],
            }),
          ],
        });

        // Add expenditure type cell with rowSpan
        const expenditureTypeCell = new TableCell({
          rowSpan: rowSpan,
          verticalAlign: VerticalAlign.CENTER,
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  text: expenditureType,
                  size: this.DEFAULT_FONT_SIZE,
                }),
              ],
            }),
          ],
        });

        // Add the first row with installment details
        const firstInstallment = installments[0];
        const firstAmount = installmentAmounts[firstInstallment] || 0;

        rows.push(
          new TableRow({
            height: { value: rowHeight, rule: HeightRule.ATLEAST },
            children: [
              indexCell,
              nameCell,
              this.createTableCell(
                firstAmount.toLocaleString("el-GR", {
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2,
                }),
                "center",
              ),
              this.createTableCell(firstInstallment, "center"),
              afmCell,
              expenditureTypeCell,
            ],
          }),
        );

        // Add subsequent rows for remaining installments
        for (let i = 1; i < installments.length; i++) {
          const installment = installments[i];
          const amount = installmentAmounts[installment] || 0;

          rows.push(
            new TableRow({
              height: { value: rowHeight, rule: HeightRule.ATLEAST },
              children: [
                // These cells will be empty due to rowSpan in the first row
                this.createTableCell(
                  amount.toLocaleString("el-GR", {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  }),
                  "center",
                ),
                this.createTableCell(installment, "center"),
              ],
            }),
          );
        }
      }
    });